#!/bin/bash

# NOTE: This script assumes a newly-generated `target` folder was generated by Terraform and either:
#  1) Copied over by the TF script and invoked by remote-exec, or
#  2) Manually copied over by the user and manually invoked.

# Purge EC2 of pre-existing files prior to unpacking /target.
HOME_PATH=/home/ec2-user

rm -rf $HOME_PATH/tower.env || true
rm -rf $HOME_PATH/tower.yml || true
rm -rf $HOME_PATH/docker-compose.yml || true
rm -rf $HOME_PATH/data-studios.env || true


# Populate the ~/.bashrc with values the Ansible scripts will need for their logic.
# Added single-quotes around DB_URL to handle connection string with `&` in it (which was pushing keys to bg) 
{
  echo -e "\n\n# CONFIG ADDED BY TERRAFORM INSTALLER ON: $(date)"
  echo -e "export APP_NAME=${app_name}"
  echo -e "export CACERT_GENERATE_PRIVATE=${flag_generate_private_cacert}"
  echo -e "export CACERT_USE_EXISTING_PRIVATE=${flag_use_existing_private_cacert}"
  echo -e "export CACERT_DO_NOT_USE_HTTPS=${flag_do_not_use_https}"
  echo -e "export CACERT_S3_PREFIX=${bucket_prefix_for_new_private_ca_cert}"
  echo -e "export CACERT_EXISTING_CA_CRT=${existing_ca_cert_file}"
  echo -e "export CACERT_EXISTING_CA_KEY=${existing_ca_key_file}"

  echo -e "export DB_POPULATE_EXTERNAL_INSTANCE=${populate_external_db}"
  echo -e "export DB_URL=\"${tower_db_url}\""
  echo -e "export DB_NAME=${db_database_name}"

  echo -e "export TOWER_BASE_URL=${tower_base_url}"
  echo -e "export TOWER_SERVER_URL=${tower_server_url}"
  echo -e "export TOWER_API_ENDPOINT=${tower_api_endpoint}"
  echo -e "export SEQERAKIT_USE_HOSTS_FILE=${flag_create_hosts_file_entry}"
} >> ~/.bashrc


# If R53 record not created, point tower_base_url to 127.0.0.1 so seqerakit can still run with the DNS name.
# Populate hosts file if necessary. Must use sudo.
%{ if flag_create_hosts_file_entry == true }
  echo -e "127.0.0.1 ${tower_base_url}" | sudo tee -a /etc/hosts > /dev/null
%{ endif }